%% File: test_LSAP.m
% Find solution via Hungarian algorithm
clc; clear variables; close all;
addpath('lib');
addpath('lib/display'); addpath('lib/log');
addpath('lib/alg'); addpath('lib/alg/connect');

%% Test with all maps and all types of methods
%% 1
str1='shape1-robot15-target12-method1-time';
disp(str1);
% Map
Map_Size = [24, 24]; % length*widthhalf
% Robots
robot_locs = [6,2;10,2;14,2;2,6;2,10;2,14;18,22;14,22;10,22;22,19;22,16;22,13;22,10;22,7;22,4];
dock = [0,0,0,1;...
        1,0,0,1;...
        1,1,1,0;...
        0,1,0,1;...
        1,0,0,0;...
        0,1,1,1;...
        1,0,1,1;...
        0,1,0,0;...
        1,0,1,0;...
        1,1,0,1;...
        0,1,1,0;...
        0,0,1,0;...
        0,0,0,1;...
        0,0,0,0;...
        1,1,0,0;...

        ]; % up, down, left, right
% Targets
tar_locs = [11,13;12,12;12,13;12,14;13,11;13,12;13,14;13,15;14,12;14,13;14,14;15,13 ];
tar_ctr  = 13;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% 2
str1='shape1-robot15-target12-method2-time';
disp(str1);
% Map
Map_Size = [24, 24]; % length*widthhalf
% Robots
robot_locs = [6,2;10,2;14,2;2,6;2,10;2,14;18,22;14,22;10,22;22,19;22,16;22,13;22,10;22,7;22,4];
dock = [0,0,0,1;...
        1,0,0,1;...
        1,1,1,0;...
        0,1,0,1;...
        1,0,0,0;...
        0,1,1,1;...
        1,0,1,1;...
        0,1,0,0;...
        1,0,1,0;...
        1,1,0,1;...
        0,1,1,0;...
        0,0,1,0;...
        0,0,0,1;...
        0,0,0,0;...
        1,1,0,0;...

        ]; % up, down, left, right
% Targets
tar_locs = [11,13;12,12;12,13;12,14;13,11;13,12;13,14;13,15;14,12;14,13;14,14;15,13 ];
tar_ctr  = 13;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% 3
str1='shape1-robot15-target12-method3-time';
disp(str1);
% Map
Map_Size = [24, 24]; % length*widthhalf
% Robots
robot_locs = [6,2;10,2;14,2;2,6;2,10;2,14;18,22;14,22;10,22;22,19;22,16;22,13;22,10;22,7;22,4];
dock = [0,0,0,1;...
        1,0,0,1;...
        1,2,2,0;...
        0,2,0,1;...
        1,0,0,0;...
        0,2,2,1;...
        1,0,2,1;...
        0,2,0,0;...
        1,0,2,0;...
        1,2,0,1;...
        0,2,2,0;...
        0,0,2,0;...
        0,0,0,1;...
        0,0,0,0;...
        1,2,0,0;...

        ]; % up, down, left, right
% Targets
tar_locs = [11,13;12,12;12,13;12,14;13,11;13,12;13,14;13,15;14,12;14,13;14,14;15,13 ];
tar_ctr  = 13;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% 4
str1='shape1half-robot18-target18-method1-time';
disp(str1);
% Map
Map_Size = [30,30]; % length*widthhalf
% Robots
robot_locs = [2,2;8,2;14,2;20,2;28,2;...
              2,8;2,14;2,20;2,28;...
              22,28;16,28;10,28;13,28;...
              28,28;28,22;28,16;28,13;28,10];
dock = [0,1,0,1;0,1,1,0;...
        0,1,0,1;1,1,0,1;1,1,1,0;0,1,1,0;...
        0,0,0,1;1,1,0,1;1,1,1,0;1,1,0,1;1,1,1,0;0,0,1,0;...
        1,0,0,1;1,1,0,1;1,1,1,0;1,0,1,0;...
        1,0,0,1;1,0,1,0;...
        ]; % up, down, left, right
% Targets
tar_locs = [ 15,17;16,17;...
        14,16;15,16;16,16;17,16;...
  13,15;14,15;15,15;16,15;17,15;18,15;...
        14,14;15,14;16,14;17,14;...
              15,13;16,13;];
tar_ctr  = 15;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% 5
str1='shape1half-robot18-target18-method2-time';
disp(str1);
% Map
Map_Size = [30,30]; % length*widthhalf
% Robots
robot_locs = [2,2;8,2;14,2;20,2;28,2;...
              2,8;2,14;2,20;2,28;...
              22,28;16,28;10,28;13,28;...
              28,28;28,22;28,16;28,13;28,10];
dock = [0,1,0,1;0,1,1,0;...
        0,1,0,1;1,1,0,1;1,1,1,0;0,1,1,0;...
        0,0,0,1;1,1,0,1;1,1,1,0;1,1,0,1;1,1,1,0;0,0,1,0;...
        1,0,0,1;1,1,0,1;1,1,1,0;1,0,1,0;...
        1,0,0,1;1,0,1,0;...
        ]; % up, down, left, right
% Targets
tar_locs = [ 15,17;16,17;...
        14,16;15,16;16,16;17,16;...
  13,15;14,15;15,15;16,15;17,15;18,15;...
        14,14;15,14;16,14;17,14;...
              15,13;16,13;];
tar_ctr  = 15;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% 6 
str1='shape1half-robot18-target18-method3-time';
disp(str1);
% Map
Map_Size = [30,30]; % length*widthhalf
% Robots
robot_locs = [2,2;8,2;14,2;20,2;28,2;...
              2,8;2,14;2,20;2,28;...
              22,28;16,28;10,28;13,28;...
              28,28;28,22;28,16;28,13;28,10];
dock = [0,2,0,1;...
        0,2,2,0;...
        0,2,0,1;...
        1,2,2,0;...
        1,2,0,1;...
        0,2,2,0;...
        0,0,0,1;...
        1,2,2,0;...
        1,2,0,1;...
        1,2,2,0;...
        1,2,0,1;...
        0,0,2,0;...
        1,0,0,1;...
        1,2,2,0;...
        1,2,0,1;...
        1,0,2,0;...
        1,0,0,1;...
        1,0,2,0;...
        ]; % up, down, left, right
% Targets
tar_locs = [ 15,17;16,17;...
        14,16;15,16;16,16;17,16;...
  13,15;14,15;15,15;16,15;17,15;18,15;...
        14,14;15,14;16,14;17,14;...
              15,13;16,13;];
tar_ctr  = 15;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% 7
str1='shape2-robot28-target28-method1-time';
disp(str1);
% Map
Map_Size = [30,30]; % length*widthhalf
% Robots
robot_locs = [5,2;8,2;11,2;14,2;17,2;20,2;23,2;2,5;2,8;2,11;2,14;2,17;2,20;2,23;25,28;22,28;19,28;16,28;13,28;10,28;7,28;28,25;28,22;28,19;28,16;28,13;28,10;28,7];
dock = [1,0,0,1;...
1,1,0,1;...
0,1,0,1;...
1,0,0,1;...
1,1,1,1;...
1,1,1,1;...
1,1,1,0;...
0,1,0,0;...
1,0,0,1;...
1,1,1,1;...
1,1,1,1;...
0,1,1,0;...
1,0,0,0;...
1,1,1,1;...
1,1,1,1;...
0,1,1,1;...
1,0,1,0;...
1,1,1,1;...
1,1,1,1;...
0,1,0,1;...
1,0,1,0;...
1,1,1,1;...
1,1,1,1;...
1,1,0,1;...
0,1,0,0;...
1,0,1,0;...
1,1,1,0;...
0,1,1,0;...
        ]; % up, down, left, right
% Targets
tar_locs = [12,15;12,16;12,17;13,14;13,15;13,16;13,17;13,18;14,13;14,14;14,15;14,16;15,12;15,13;15,14;15,15;16,13;16,14;16,15;16,16;17,14;17,15;17,16;17,17;17,18;18,15;18,16;18,17 ];
tar_ctr  = 15;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% 8
str1='shape2-robot28-target28-method2-time';
disp(str1);
% Map
Map_Size = [30,30]; % length*widthhalf
% Robots
robot_locs = [5,2;8,2;11,2;14,2;17,2;20,2;23,2;2,5;2,8;2,11;2,14;2,17;2,20;2,23;25,28;22,28;19,28;16,28;13,28;10,28;7,28;28,25;28,22;28,19;28,16;28,13;28,10;28,7];
dock = [1,0,0,1;...
1,1,0,1;...
0,1,0,1;...
1,0,0,1;...
1,1,1,1;...
1,1,1,1;...
1,1,1,0;...
0,1,0,0;...
1,0,0,1;...
1,1,1,1;...
1,1,1,1;...
0,1,1,0;...
1,0,0,0;...
1,1,1,1;...
1,1,1,1;...
0,1,1,1;...
1,0,1,0;...
1,1,1,1;...
1,1,1,1;...
0,1,0,1;...
1,0,1,0;...
1,1,1,1;...
1,1,1,1;...
1,1,0,1;...
0,1,0,0;...
1,0,1,0;...
1,1,1,0;...
0,1,1,0;...
            ]; % up, down, left, right
% Targets
tar_locs = [12,15;12,16;12,17;13,14;13,15;13,16;13,17;13,18;14,13;14,14;14,15;14,16;15,12;15,13;15,14;15,15;16,13;16,14;16,15;16,16;17,14;17,15;17,16;17,17;17,18;18,15;18,16;18,17 ];
tar_ctr  = 15;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% 9
str1='shapehalf-robot6-target6-method3-time';
disp(str1);
% Map
Map_Size = [24,24]; % length*widthhalf
% Robots
robot_locs = [10,2;2,10;14,22;22,18;22,14;22,10];
dock = [1,0,0,1;...
        1,0,0,1;...
        0,2,0,1;...
        1,0,2,0;...
        0,2,2,0;...
        0,2,2,0;...
        ]; % up, down, left, right
% Targets
tar_locs = [ 11,11;11,12;11,13;12,11;12,12;12,13 ];
tar_ctr  = 12;
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 1);
isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, 2);

%% Functions 
% Check connectivity
function is_valid = isLSAPValid(tar_locs, robot_locs, dock, Map_Size, tar_ctr, type)
    % type = 1 - solve LSAP for PAA (extend the targets)
    % type = 2 - solve LSAP for translated targets (no target extension)

    % Check algorithm type and solve corresponding LSAP
    if nargin < 6
        type = 1;  % default testing on PAA
    end
    disp("Select algorithm: "+string(type));
    if type == 1
        ext_locs = getExtendedTargets(tar_locs, tar_ctr, Map_Size);
        matches = SolveLSAP(ext_locs, robot_locs);
    elseif type == 2
        trans_locs = getTranslatedTargets(tar_locs, robot_locs);
        matches = SolveLSAP(trans_locs, robot_locs);
    else
        error("Invalid algorithm type: "+string(type));
    end

    % Check whether solution is valid
    is_dock_identical = isempty(find(dock==2,1));
    n_con = ConnectionCheck(tar_locs(matches(:,1),:),dock(matches(:,2),:), ...
        is_dock_identical);  % Number of connected components
    if n_con > 1
        disp("Hungarian solution is not valid. Found "+string(n_con)+...
            " connected components.");
        is_valid = false;
    else
        disp("Solution valid.");
        is_valid = true;
    end

    % Connectivity statistics
    % # of connections, # of disconnections
    connect_matrix = CreateAdjacentMatrix(tar_locs(matches(:,1),:), ...
        dock(matches(:,2),:), is_dock_identical, 1);
    contact_matrix = CreateAdjacentMatrix(tar_locs(matches(:,1),:), ...
        dock(matches(:,2),:), is_dock_identical, 2);
    N_connect = nnz(connect_matrix)/2;  % Number of connected surfaces
    N_contact = nnz(contact_matrix)/2;
    if is_dock_identical
        disp("Number of connected contact surfaces: "+string(N_connect));
        disp("Number of disconnected contact surfaces: "+string(N_contact - N_connect));
    else
        % # of same gender contacts
        gender_matrix1 = CreateAdjacentMatrix(tar_locs(matches(:,1),:), ...
            dock(matches(:,2),:), is_dock_identical, 3);
        gender_matrix2 = CreateAdjacentMatrix(tar_locs(matches(:,1),:), ...
            dock(matches(:,2),:), is_dock_identical, 4);
        N_gender1 = nnz(gender_matrix1)/2;
        N_gender2 = nnz(gender_matrix2)/2;
        disp("Total contact surfaces: "+string(N_contact));
        disp("Number of connected contact surfaces: "+string(N_connect));
        disp("Number of N-N contacts (dock=1): "+string(N_gender1));
        disp("Number of S-S contacts (dock=2): "+string(N_gender2));
    end
    disp("---------------------");
end

% Extend targets
function ext_locs = getExtendedTargets(tar_locs, tar_ctr, Map_Size)
    gmap = map(Map_Size, 3);  % cogn_dist = 3
    [l, ~] = size(tar_locs);
    Tars = [];
    for i = 1:l
        Tars =[Tars; targetPoint(i, tar_locs(i, :), gmap)];
    end
    tars = targetGroup(Tars);
    docks = ones(l, 4);   % Allow all docking positions to get extension
    assignment = 1:l;
    tars.setDisplayIDandDock(assignment, docks);
    ext = Extension(tars, gmap);
    ext.TargetToTree(tar_ctr, 3);  % ext_l = 3
    leaf_ids = ext.tarTree.findleaves();
    ext_locs = zeros(l, 2);
    for l_id=leaf_ids
        leaf_tar = ext.tarTree.get(l_id).TargetList(1);  % targetPoint
        ext_locs(leaf_tar.ID, :) = leaf_tar.Location;
    end
end

% Move target locations
function trans_locs = getTranslatedTargets(tar_locs, robot_locs)
    % Calculate target center and robot center
    tar_ctr = mean(tar_locs);
    rob_ctr = mean(robot_locs);
    trans_locs = tar_locs - tar_ctr + rob_ctr;
end


